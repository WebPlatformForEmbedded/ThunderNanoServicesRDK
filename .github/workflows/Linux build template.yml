name: Linux build template

on:
  workflow_call:

jobs:
  ThunderNanoServicesRDK:

    runs-on: ubuntu-24.04

    strategy:
      matrix:
        build_type: [Debug, Release, MinSizeRel]
        architecture: [32, 64]

# --------- Packages install & artifacts download ---------
    name: Build type - ${{matrix.build_type}}${{matrix.architecture == '32' && ' x86' || ''}}
    steps:
    - name: Prepare apt (add i386 if needed)
      if: ${{ matrix.architecture == '32' }}
      run: |
        sudo dpkg --add-architecture i386

    - name: Update apt indices (with retries)
      shell: bash
      run: |
        set -euo pipefail
        for attempt in {1..5}; do
          if sudo apt-get update -o Acquire::Retries=5 -o Acquire::http::Timeout=30; then
            break
          fi
          echo "apt-get update failed (attempt $attempt), retrying..."
          sleep $((attempt*10))
        done

    - name: Install system dependencies
      shell: bash
      run: |
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        PKGS="python3-venv python3-pip build-essential cmake ninja-build libusb-1.0-0-dev"
        if [ "${{ matrix.architecture }}" = "32" ]; then
          PKGS="$PKGS zlib1g-dev:i386 libssl-dev:i386 libsbc-dev:i386 gcc-13-multilib g++-13-multilib"
        else
          PKGS="$PKGS zlib1g-dev libssl-dev libsbc-dev"
        fi
        for attempt in {1..4}; do
          if sudo apt-get install -y --no-install-recommends $PKGS; then
            break
          fi
          echo "apt-get install failed (attempt $attempt), cleaning up & retrying..."
          sudo apt-get clean
          sleep $((attempt*15))
        done

    - name: Set up Python environment
      run: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install jsonref

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ThunderInterfaces-${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}-artifact
        path: ${{matrix.build_type}}

    - name: Unpack files
      run: |
        tar -xvzf ${{matrix.build_type}}/${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz
        rm ${{matrix.build_type}}/${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz

# ----- Checkout & Options regex -----
    - name: Checkout ThunderNanoServicesRDK
      uses: actions/checkout@v4
      with:
        path: ThunderNanoServicesRDK
        repository: WebPlatformForEmbedded/ThunderNanoServicesRDK

    - name: Regex ThunderNanoServicesRDK
      if: contains(github.event.pull_request.body, '[Options:')
      id: plugins
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '(?<=\[Options:).*(?=\])'
        regex_flags: 'gim'
        search_string: ${{github.event.pull_request.body}}

    - name: Checkout libopkg
      uses: actions/checkout@v4
      with:
        path: opkg
        repository: oe-mirrors/opkg

# ----- Build & upload artifacts -----
    - name: Build libopkg
      run: |
        export PKG_CONFIG_PATH=/usr/lib/${{matrix.architecture == '32' && 'i386' || 'x86_64'}}-linux-gnu/pkgconfig:$PKG_CONFIG_PATH
        cd opkg
        ./autogen.sh || true
        ./configure --prefix=/usr/local ${{matrix.architecture == '32' && 'CFLAGS="-m32" LDFLAGS="-m32"' || ''}}
        make
        sudo make install

    - name: Install libopkg headers
      run: |
        sudo mkdir -p /usr/local/include/libopkg
        sudo cp $GITHUB_WORKSPACE/opkg/libopkg/*.h /usr/local/include/libopkg

    - name: Build ThunderNanoServicesRDK
      run: |
        source venv/bin/activate
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/${{matrix.architecture == '32' && 'i386' || 'x86_64'}}-linux-gnu/pkgconfig:$PKG_CONFIG_PATH
        cmake -G Ninja -S ThunderNanoServicesRDK -B ${{matrix.build_type}}/build/ThunderNanoServicesRDK \
        -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror -m${{matrix.architecture}}" \
        -DCMAKE_C_FLAGS="-Wall -Wextra -Wpedantic -Werror -m${{matrix.architecture}}" \
        -DCMAKE_INSTALL_PREFIX="${{matrix.build_type}}/install/usr" \
        -DCMAKE_MODULE_PATH="${PWD}/${{matrix.build_type}}/install/usr/include/WPEFramework/Modules" \
        -DPLUGIN_DEVICEIDENTIFICATION=ON \
        -DPLUGIN_DEVICEINFO=ON \
        -DPLUGIN_LOCATIONSYNC=ON \
        -DPLUGIN_MESSAGECONTROL=ON \
        -DPLUGIN_MESSENGER=ON \
        -DPLUGIN_MONITOR=ON \
        -DPLUGIN_OPENCDMI=ON \
        -DPLUGIN_PERFORMANCEMETRICS=ON \
        -DPLUGIN_PLAYERINFO=ON \
        -DPLUGIN_PACKAGER=ON \
        ${{steps.plugins.outputs.first_match}}
        cmake --build ${{matrix.build_type}}/build/ThunderNanoServicesRDK --target install

    - name: Tar files
      run: tar -czvf ${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz ${{matrix.build_type}}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: ThunderNanoServicesRDK-${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}-artifact
        path: ${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz
